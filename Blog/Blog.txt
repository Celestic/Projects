Blog
========

Blog #15 (11/05/2014)
=====================
We worked on our dissertation all weekend, so didn’t have too much time to work on our applications. Yet today we took
the time to develop a bit further on the image tiler application.
The application was already fully functional for a String to be divided into bytes and hidden in the different image tiles,
but it didn’t work for any file type yet, which was asked for in the assignment.
It was a really tricky thing to do, but we had good fun refactoring the application. 

The problem we faced was that we needed to somehow tell our application what sort of file was being read and vice versa
be able to know what type of file had to be decrypted afterwards. We managed to accomplish this by reading in a file and
its extension, chop it into bytes and subsequently add a zero-byte as separator between the filename-extension part and
the actual data part that has to be hidden. After this we used bit shifting to add this array of bytes into the different
tiles and finished off by writing the decryption part. This part reads every different tile and checks for the hidden data
using HashCodes to check, if nothing is found, it flips the tile 90 degrees and checks again, this until all four sides of
the image are checked. Finally, we read the returned byte array until a zero-byte is found and then use a ByteOuputstream
together with a FileOutputstream to write the hidden data part from after the zero-byte to a filename and extension read
before the zero-byte.

This was kind of really exciting to test, but worked smoothly. We tested our application with a .txt-file, a .png-file
and a .wav audio file to be hidden inside a .jpeg, and all of them got hidden and extracted successfully. Hooray!



Blog #14 (09/05/2014)
=====================
We have been focussing on two main things: routing algorithms and getting the final set of road data to work with.

Routing:
--------
Connecting two nodes in order to generate cars and checking which road they took is getting quite frustrating.
Given a list of cities/nodes and the distances between each pair of cities/nodes, what is for example the shortest
possible route that visits each city/node exactly once and returns to the origin city?
We tried a few algorithms but couldn't get them working so far.  There is always some issue with drawing our network graph.

Thinking about the Traveling salesmen algorithm, feeling like that is the way to go, altough it seems to be very hard to
figure out the exact details, since most of the algorithms are some "next-level math".

We're trying out some libraries at the moment like pgRouting & graphopper , the last one looks promising.

We could of course also just go for a random starting and ending point and let it randomly simulate whether a car would
take a turn at a certain intersection or not, but for now, we are keeping this as a plan B, since working with a routing
algorithm seems to be much more educational and fun.

Final set of data:
------------------
As mentioned in the earlier blog, we had a really hard time extracting and parsing data from Osmosis, since the files
were immensely huge. Once we got the Java Sink implementation working, we were really happy and thought we had all of the
data we needed. Over the past week, we have been writing a "Relation-extractor" that would parse all of the relation-tags
in the OSM-file and return us all of the nodes that belonged together. This took quite some work to accomplish (and again
hours to run), but we managed to finish it eventually.

Though, and here is where the bad news comes in, after some manual checking of a few nodes of a relation, it seemed the
data provided by the OSM-file had A LOT of useless relations that we still don't understand.
For example: a road with 10 nodes, of which 9 lay within 5 metres of each other, and the last one 30 miles further east.

This was of course not what we wanted..

So today we wrote a filtering application that used our earlier written distance calculator to check whether the nodes
seemed to be in a realistic composition to one another.

We applied some other filters on it as well, like: only keep relations with more than 5 nodes, only keep highways and
motorways, only keep the ones that actually have intersections.

After completing this application, we decided to check every intersection manually and build our own relation system
between these roads. We decided to do this by giving every road our own ID and putting them in a look-up table, give
every node its own ID and finally give every intersection the ID of both the road and node with which it intersected.

Then we can just go through our look-up table and check to which other roads a car could make a turn to.
You can imagine this took a realllyyy long time to do manually, but at least we now are sure we have a 100% exact set
of data to work with.

Last thing we managed to complete was  writing this data to our own format in JSON using the JSON-simple library, an
example output:

{"relations":[

	{"way_id":1,
		
		"nodes":[	
			{"id":0,"longitude":-0.231553,"latitude":51.573553},

			{"id":1,"longitude":-0.236702,"latitude":51.60011},
			
			{"id":2,"longitude":-0.272236,"latitude":51.637947},
			
			...
			
			{"id":70,"longitude":-1.511788,"latitude":53.730823,"relation_road_ids":[32],"relation_node_ids":[806]}

Finally, a last small update: generating cameras has received a little optimization, thanks to our distance calculator we
can calculate the distance between the cameras and make sure they are both not too far away from each other, but also not
too close to each other.



Blog #13 (06/05/2014)
=====================
When we thought we had enough data to work with we let it parse by the Osmosis parser and putted the 'Nodes', 'Ways' and
'Relations' into lists.
We tried to be effecient as possible by building sorting comparators so we could sort our lists on latitude & longitude.
After that we generated cars with a start node and a end node.
After that we tried to connect those two dots by building a route between, this wasn't as easy as it looked. 
We tried several demo's etc until we read about the Dijkstra algorithm.

Dijkstra partitions all nodes into two distinct sets. Unsettled and settled. 
Initially all nodes are in the unsettled sets, e.g. they must be still evaluated. 
A node is moved to the settled set if a shortest path from the source to this node has been found.
Initially the distance of each node to the source is set to a very high value.

First only the source is in the set of unsettledNodes.

The algorithms runs until the unsettledNodes are empty. In earch iteration it selects the node with the lowest distance
from the source out the unsettled nodes. If reads all edges which are outgoing from the source and evaluates for each
destination node in these edges which is not yet settled if the known distance from the source to this node can
be reduced if the selected edge is used. If this can be done then the distance is updated and the node is added to the
nodes which need evaluation.

Let's hope building a network of roads won't be that difficult anymore.


Blog #12 (03/05/2014)
=====================
The last two days have been quite frustrating. We started working with the .osm-file that we generated with Osmosis.
This was an XML-formatted file of over 100MB, (only including the highways, the files including all the major roads were
multiple GB's large). We started off by writing our own parser for this using a DOM XML reader implementation. It wasn't
easy to write this, because the osm-file only used the parent tags <node> and <relation>, and all of the other information
was nested in the child elements <tag> that held only key and value pairs for all the information. Neither was there
consistency in these tags, some included information that others didn't and so on.

Example:
========
<node id="104734" version="13" timestamp="2013-05-17T15:44:57Z" uid="529926" user="craigsdg" changeset="16169093" lat="51.5656555" lon="-

1.7852779">
    <tag k="alt_name" v="Swindon Station"/>
    <tag k="name" v="Swindon Railway Station"/>
    <tag k="naptan:AtcoCode" v="9100SDON"/>
    <tag k="operator" v="First Great western"/>
    <tag k="platforms" v="4"/>
    <tag k="railway" v="station"/>
    <tag k="wheelchair" v="yes"/>
    <tag k="wikipedia" v="en:Swindon railway station"/>
</node>

This meant we had to parse every key of every <tag> and check which key it was, only after doing so we could extract
certain values we needed. After finishing our XML-reader, it was time for a first test. We tried to run it,
but immediately got a Java heap space exception. We googled for a solution and found the possibility to assign more
memory to JVM using Eclipse's VM Arguments. We assigned 2GB of RAM this time and the exception seemed to stay away.
We were patiently waiting for the output, but the running seemed to be endless, so we just left it running for a while
and went to the grocery store meanwhile. When we came back after an hour, it still wasn't finished. It needed 2 more
hours to complete, only to end with another Java heap space exception, because after the parsing, we tried to write the
data we needed to a new XML-file and this seemed to be impossible with only the 2GB of RAM we had assigned to the JVM.
We tried running it on another laptop with 4GB's of RAM assigned to it, and yet again to find out 3 hours later that
this wasn't enough. We decided using our own parser wasn't the way to go and started googling some alternatives. This is
when we found out that Osmosis had its own XML-reader which used a Sink implementation and Entities to parse the elements
of the document. We implemented this and this time it only took 10 seconds to parse the whole document. This of course
made us a bit angry at ourselves for not trying this earlier. But nonetheless, it was good news.

We started playing around with this parser and found some interesting things: there already were Node and Relation classes
that we could use. To see whether the read element was actually a node, we could use "if (entity instanceof Node)". At
this point, we were already thinking that we were very close to extracting all the UK highways with their actual GPS
coordinates, but this seemed to be a bit presumptious. While reading in all the Relations, we could extract the different
members of the relation with their corresponding ID's, these should link to the different Nodes with their coordinates.
But we soon found out that we could only cast these members to a class called WayNode, which for some odd reason didn't
have the properties Latitude and Longitude, neither was it convertable to a Node. This meant we had to find a way to link
the ID's of these WayNodes to the ID's of the 'normal' Nodes. To accomplish this, we wrote a second Sink implementation
ourselves, so that the first one would read in all the Nodes and store them in a list, and the second one would read in
all the Relations and store the different members in a List within a List (ArrayList<ArrayList<WayNode>>).
After these two processes, we called a method that started comparing the ID's of these WayNode's per Relation with every
single ID in the list of Nodes. This worked well, but we couldn't add the needed coordinates to these WayNodes, since,
as mentioned earlier, they didn't have these properties. So we needed another fix for this. This is when we got the idea
to start using JSON and just write everything in our own format. This would also be much easier to work with in the future.
A little problem we had here was creating and writing the JSONObject at the right time:

-  Start reading the main list of relations (= a highway) -> create a parent JSONObject, but don't write it yet

-  Start reading the first way node in the relation and compare it to the nodes in the full node list -> write the node ID,
   latitude and longitude to the same JSONObject, but don't write it yet
   
-  Keep reading the other way nodes in the same relation and add these ID's, lat's and lon's to the same JSONObject,
   but don't write it yet
   
-  When done looping through all the way nodes in the relation, check if there are more than 1 nodes that were found
   (we can't create a street from just one GPS coordinate) -> if so, then write this JSONObject to a file

This program took 2 and half hours to run, but completed successfully. So we now have our own JSON-file representing all
the highways of the UK represented by nodes with their corresponding GPS coordinates.

Example:
========

{"way_id":50,

	"params":[

		{"longitude":1.2064482,"latitude":52.0263942,"node_id":16807730},				
		{"longitude":1.2074784,"latitude":52.0260132,"node_id":20833152},
		...




Blog #11 (30/04/2014)
=====================
Stumbled across 'Osmosis'. Apparently it's related to Openstreetmaps.  
it has the ablity to grab an area or the etire planet if I wish so. 
When I got the area I wanted I can filter out whatever data I need,
every highway-motorway and even train or metroways are just a matter commands away.
It returns me an XML file that is full of nodes & latitude and longitudes.
Ofcourse whenever i try these commands they won't work from the first time. 
There was an error with the .bat file , it didn't know the exact location of my java.

Yes, entered a random collection of data from a country and I received all the roads i wanted even tram or railroads.

<node id="737219006" version="4" timestamp="2012-02-22T18:59:41Z" uid="13832" user="Peter14" changeset="10762013" lat="48.144375" lon="11.5454794"/>
  <node id="21324005" version="50" timestamp="2012-03-05T02:25:29Z" uid="342705" user="KonB" changeset="10875884" lat="48.1436171" lon="11.5488362">
    <tag k="crossing" v="traffic_signals"/>
    <tag k="highway" v="traffic_signals"/>
    <tag k="TMC:cid_58:tabcd_1:Class" v="Point"/>
    <tag k="TMC:cid_58:tabcd_1:Direction" v="negative"/>
    <tag k="TMC:cid_58:tabcd_1:LCLversion" v="9.00"/>
    <tag k="TMC:cid_58:tabcd_1:LocationCode" v="35356"/>
    <tag k="TMC:cid_58:tabcd_1:NextLocationCode" v="35357"/>
    <tag k="TMC:cid_58:tabcd_1:PrevLocationCode" v="35355"/>
  </node>

are a few examples of the data retrieved.
with this i should be able to retrieve everything within the uk.

Now we're sure that we retrieve data based on the xml file. We should be making sure it lies within the UK. 
this is how I am supposed to grab the UK.
GET /api/0.6/trackpoints?bbox=left,bottom,right,top&page=pageNumber
where:
left, bottom, right, and top are used the same way as they are in the command to retrieve nodes, ways, and relations.
pageNumber specifies which group of 5,000 points, or page, to return. Since the command does not return more than
5,000 points at a time, this parameter must be incremented and the command sent again (using the same bounding box) in
order to retrieve all of the points for a bounding box that contains more than 5,000 points. When this parameter is 0
(zero), the command returns the first 5,000 points; when it is 1, the command returns points 5,001–10,000, etc.

box=-1.9528,50.7034,-1.7633,50.7868 is supposed to be a box around the UK.
This is rather clunky with a lot of space that is actually water or wasted space so good thing we could draw close to a
perfect UK already where the coordinates are a good as perfect.

From the England.osm file we retrieved all the higways and motorways. We couldn't even open the files using notepad++
because they were way to big, 10GB of XML data. The only file we could open was the one only including the highways.
We will be looking for a way to parse these files tomorrow.



Blog #10 (27/04/2014)
=====================
Today we thought about ways to generate coordinates within our drawn UK MultiPolygon. We both agreed we would only
be happy with getting the actual coordinates from the motorways, but that would mean we had to use OpenStreetMaps or
another tool to extract that data. We put that idea aside for today and decided to start off by finding a way to just
get coordinates within the UK. We continued reading the documentation about vividsolutions to see if they had any
features in their API that would help us accomplish this, but didn’t really find any. Then we found a workaround for
this: a MultiPolygon had the properties of a Polygon, so that meant we could get the bounding rectangle around the
polygon. Then we could subsequently try and generate coordinates within this rectangle and afterwards check if they
also actually lied within the polygon by using the method contains(Point p). We tried this out and this seemed to work
smoothly. We can thus now create random lines/roads within the UK borders. Tomorrow we will be looking for a way to
generate the actual roads with their corresponding GPS coordinates.


Blog #9 (26/04/2014)
====================
During the last 2 days we focussed on finding a way to generate coordinates within the UK borders. As we discussed in
an earlier meeting, our initial plan was to draw a bounding rectangle around the UK and extract the coordinates
within that rectangle. But this would of course mean that we would inevitably include parts of ocean as well, so we
weren't satisfied with this approach. We had to find a way to re-create the border of the UK, and this preferably by
using the accurate GPS coordinates. So we started to read a lot of documentation on different approaches to accomplish
this. A first one we found would be using MapInfo, a powerful mapping and geographic analysis application. We downloaded
the program and played around a little bit with the included examples, but it didn't really look like the most
straight-forward approach for us. Then we found a website (http://www.baruch.cuny.edu/geoportal/data/esri/esri_intl.htm)
with open-source shape-files that we could download, these included a lot of details, of which the border-coordinates
were one. We could open this file with MapInfo as well, but chose not to, because we wanted to directly use this info
in a Java-program. After some more reading, we found a website called converter.mygeodata.eu which made it possible to
export this shape-file data to GeoJSON, a format for encoding a variety of geographic data structures. One of its
possibilities was extracting a MultiPolygon from a set of coordinates in JSON-format, this was exactly what we needed
to draw our border around the UK. It took us quite a while to get everything working, but finally managed to create
something looking like this: (see folder Screenshots, UK_border_screenshot)


Blog #8 (23/04/2014)
====================
o	ImageTiler: we already had achieved the hiding of data through bit shifting for one image.
	This wrote a byte of data to the end of the image. However, the instructions were to split up this byte
	and write a piece of it at the end of every separate tile in our tiled image. This was quickly fixed, but
	then we got stuck at the decoding of this. Since there was the possibility of our tiles getting randomly
	rotated, we had to find a way to let our decoder know where in the image to read. We then got familiar with
	the usage of HashCodes to identify the different pieces of hidden data. It took us a while to get this working,
	but it turned out to be exactly what we needed to finish our application.


o	CryptoLocker: we found out that in some scenarios, the decryption using our algorithms caused faulty outputs.
	When writing our encrypted message from our program itself, everything worked smoothly, but once we tried
	decrypting after reading some text from a text-file, the amount of bytes read were for some reason not the
	same as when we	extracted the text from a local variable. The problem here was that the AES-128 decryption
	only accepts an encrypted amount of bytes that is divisible by 16. We read a lot about using padding schemes,
	but didn’t manage to implement this successfully. Instead we found a work-around that adds “\0” for each
	missing byte in the message to make it divisible by 16. We are not sure this is a clean way of working, but
	it works like a charm.

o	ANPR Application: we have been working on some classes and ideas here as well, mainly focussed on optimising
	the classes representing the Roads and Cameras for our ANPR application, as well as writing a Camera Manager
	class for it. We will make sure to update our blog very soon with our progress.



Blog #7 (19/04/2014)
====================
Over the last 2 days, we have been focussing on planning out every separate part of our application.
We started out by brainstorming about a full simulation of one car, since we will work with the car-based approach. 
We already wrote our Car-class last week, including its necessary properties. 
The only thing left to do here is giving it methods that will perform the actions. 
These actions will look something like: initiate, accelerate, decelerate, stop. 
We then thought about the implementation of these methods, but soon found out that they will have to be linked to certain Road-properties. 
So we temporary put the Car-methods aside and thought about the necessary Road-class. 
For now we will only be thinking about straight lines representing the streets, 
so we're not calculating in things like certain curves in a street or upward/downward going streets. 
Although key properties are: start coordinates, end coordinates and intersections. 
There was one problem here, we weren't really sure of how to ‘tell’ this street it had ANPR cameras. 
We thought of two ways of how to accomplish this: 
one way would be to give every street object a list with its cameras, 
the other would be to give every street- and camera object an ID, and let these interact with each other through some sort of look-up table. 
An advantage of using the second way would be that we can use these same camera ID’s in our Camera-manager class, that will hold the relation between a camera and its location, but also between the cameras mutually.
We’re making a few adjustments to the cryptolocker so you can choose where to store the private, public keys & the encrypted message on your system.


Blog #6 (12/04/2014)
====================
We have been thinking a lot about the architecture of how our program would look like. We first wanted to start out by
using geometric figures to calculate the distance between 2 points, so we drew this out on paper to get an idea of what
our algorithms would look like. While we were doing this, we remembered the fact that you stated the earth of course
isn't flat, so this would have an impact on longer distances. We then started thinking about the earth as a sphere, but
after research found out it was actually an ellipsoid. Knowing this, we figured calculating 2D distances inside for
example a square wouldn't really be accurate enough to please us, so we started searching for a suitable library we
could use. This is when we found Michael Gavaghan's Java Geodesy Library for GPS using Vincenty’s Formulae.
We implemented it into a little test project and started playing around with it until we felt familiar with it.
We found this a good first step of our project, since we now had an accurate representation of the earth.
After establishing that, we started thinking about other parts that were necessary in order to start our real simulation.
We decided to start off by writing a simple Camera class that would hold an ID and GPS-coordinates. For now we thought
it would be okay to just generate some random coordinates. We started off by creating a camera with basic properties:
ID, longitude & latitude and subsequently writing these to a text file.
While generating random coordinates for now seemed like a good idea, there of course is the disadvantage our camera
would be situated off-road or in water. Hopefully there's a nice, clean and efficient way to do this in the future?
This is an extremely interesting topic, from both a theoretical and practical perspective. How critical are accuracy
and correctness? Will identifying sea as land or vice-versa be a catastrophic failure? We will probably be needing
OpenStreetMaps or GoogleMaps for this, but decided to not run ahead of ourselves and leave this aside for now.

We wrote the output of the camera to a text file. For now it’s just written as plain text, but we will probably going
to try it out with XML or JSON tomorrow to see which one is actually faster. As we discussed on our meeting, JSON will
probably win this race, but XML might be stricter and has support for schemas and namespaces. In my opinion JSON is
very useful when developing a web application where fast, compact and convenient serialisation of data is required.
JSON might be the best tool for sharing data because the data is stored in arrays and records, while XML stores data
in trees and XML allows you to include data types like images, charts, and graphs.
Additionally, XML offers options for transferring the structure, or format, of the data along with the actual data.
JSON only offers options for transferring data without formatting, and only using traditional data formats. Next thing
we played around with was the auto incrementation of the ID’s of the camera’s. Let's play with this thought, we will
save the next member with an object. Imagine the following series:


Create instance1 of Camera, id=1, seq=1
Create instance2, id=2, seq=2 
Serialize instance1, id=1, seq=2
Create instance3, id=3, seq=3
Deserialize instance1, set seq=2
Create instance4, id=3, seq=3
So, we've got 2 instances, (instance3 and instance4) with the same id.
If we really want to serialize the state, should we make a separate class (and instance) for the sequence?
Probably. But it still should be a static property of the class.

class Sequence implements Serializable {

	private static Sequence seq = new Sequence();
	private int nextInt = 1;
	
	public static int nextId(){
		return seq.nextInt++;
	}

	public Object readResolve(){
		return seq;
	}
}

We should (de)serialize the sequence separately apparently, and set it to the Sequence class with separate
getters/setters. Notice that the sequence number may be accessed from more than 1 threads, so the access to it should
be synchronized.

After now having both a representation of the earth and the camera's, we started to brainstorm again about what
other part of the program we could 'chop off' into a smaller application that would be easy to implement later on.
We started thinking about the output that would need to be generated into a flat file whenever a car would pass one
of the camera's. We agreed that this part of the application had to be very error-proof  and extendable, since we will
probably alter it quite a lot in the future. With this thought in mind, we knew it would be a bad idea to write the
different fields hardcoded, but that we would probably be better off by writing a class that would represent one line
of data, holding all the different fields. This way data validation would become a lot easier, but also the getting and
setting of the actual data would be much more organised. Another advantage would of course be, as stated before, the 
fact that altering the structure of our data fields would become very easy in the future. Another thought we had was
our scepticism about the new-line escape characters and possible bugs that would show up while using them.
We started reading some documentation online and were pleased to very soon find the possibility of using
System.getProperty("line.separator"). After all the years of using Java, we had never come across this simple
possibility in Java. It goes without speaking that from now on, we will keep on using this platform-independent way of
adding escape characters. We now decided we were ready to write our text file writer using an instance of
java.io.BufferedWriter and perhaps change it to binary-writing in the future. We finished this standalone program as
well, so now have ended up with:

	- Geodesy Program capable of doing exact calculations
	- Camera generator
	- "DataLine" class representing one line of data to be written
	- FileWriter class
	
	
We have also just finished writing 0's on all the USB flash drives and SD cards. OFF TO POOLE :-) !




Blog #5 (09/04/2014)
====================
Apparently the maximum amount of cars passing the most busy camera is around 165 000. I wonder how it would work out writing all of these to the database
and thats for 1 cameras? We read somewhere there are around 8000 cameras places around the UK. Well the police said 2000 some other source said 4000 etc..
Thats going to be alot of database traffic. Did some small calculations thats going to be around 3.6 gb an hour for some parts of the program.
Thought about using SQL server management studio since we've got some experience with that.

On to the traffic simulation:
==> Generating cars with a starting and ending coordinates and other properties
==> Generating cameras at certain GPS coordinates around 8000?
			- Using OpenStreetMaps or GoogleMaps to determine the actual coordinates of a existing route
			- Methods to write the data to a flat file

			
==> Mathematics: 
			- Sides/diagonals inside a square, using vectors (distance and direction from point A to B)
			-Limiting to only UK.
			- Quadratic equations to simulate curves
		    	- Perhaps testing with sinus-functions


==> Database: 
			-Presentation Layer - Business Layer - Data Layer
			-Drawn up in an XML.
			
Probably going to come up with some more questions.


Blog #4 (08/04/2014)
====================
We got home and started brainstorming again, at first sight, we would prefer to go with a car based application since
a camera-based one looks way more complicated than the car one, since the cameras would have to know each other's existence
and data. Although using the car-based approach might consume a lot more memory, we will test this out later, but stick 
with that idea for now. A second pointer: how should we move the car from point A to point B when we're given certain
GPS coordinates? What if we want to move more cars? As discussed today, we will start out by using simple geometric 
functions to simulate movement.

We have been thinking about various ways to simulate this car movement in Java. Since a car will travel a certain
distance over a certain amount of time, it will be necessary for our program to work with some sort of timer that can
keep track of the progression of the vehicle. A first thought we had was using Threads to accomplish this.
Inside the run-method of the thread, we could use a continous while-loop representing the movement of the car,
and perhaps also implement some small things like stopping at traffic lights.

A simple (not worked out) example of this would look like:


    int pauseRedd = 6000;


    public void run()
    { 
	      while (true)
	      {  
            currentTime= System.currentTimeMillis();
            timelap = currentTime - paramTime;

            if (timelap > 50) 
               carflow[index].update();

            if (signal == RED_LIGHT)
            {
               signal = 0;
               traficLightpausingTime = pauseRedd;
            }

	          try
            {
		          Thread.sleep(CONSTANT_PAUSE_TIME + traficLightpausingTime);
	          }
	          catch (InterruptedException e)
	          {
		          break;
	          }
	      }
    }


But before running ahead of ourselves on simulating the movement, we thought it'd be smarter to start out by
thinking about the mathematics needed to do this. A continous movement could be represented by a function where
we increment a variable time and multiply it with the velocity of the vehicle. 

Subsequently we made a sketch on how our database could look like: details about the cars, details about the cameras &
routes and linking the car to a route (or in another scenario: linking a car to a camera).

And finally, we exchanged some thoughts about either writing each car instantly to the database or writing it to a flat
file, like for example a simple .txt file or .xml file which you could later on parse and xecute to write it to the
database. Using the secvond way seemed like a better idea, since it'll consume a lot less memory, plus it will also be
easier to edit and/or insert (poisonous) data later on.




Blog #3 (01/04/2014)
====================
Started the day off by thorougly reading the task description again. We read a few articles about 'Agile software developing methods' , we decided to go with Extreme Programming.
After we understood it 100% we started brainstorming and throwing ideas around on how we would start developing the application.
We made a plan about how we would like to develop the app, then we started brainstorming again to find some extra features, we found an interesting one about altering RBG values from an image.
After we made the plan we slowly started the implementation of some functions. 
So far we can crop an image , split it into a few tiles using the command line.
Tomorrow we'll probably start looking up or reading documentation on how to hide data in the tiles.


Blog #2
===========

We started the day off by finishing up our CryptoLocker, which has two versions of it. 
The first version is the one where we use a symmetric algorithm to encrypt a piece of data and store it in file somewhere, the key used to encrypt the data is stored in a file as well. 
The symmetric algorithm is quite easy to use and understand.
The second version of our CryptoLocker is the one where we use an asymmetric algorithm, which uses 2 keys, a private one and a public one, the keys are stored in a file. 
This version is a little bit trickier since we had to use some sort of RSA algorithm which we aren't familiar with yet. 
We're still trying out a few different versions of it to get more familiar with the encryption and decryption of data.



After that, we started brainstorming about different approaches to hide data inside other data. 
Because we barely have any experience in this field (yet), we started thinking about OpenPuff, which we  already work with in our first assignment last week. 
We wanted to start by taking a deeper look into what is happening behind the scenes when a message gets hidden into an image, while using the OpenPuff's hiding techniques. 
After doing the necessary research, we tried to come up with our own implementation of the act of hiding a byte of data into an image-file, by altering the RGBA values of a pixel of the image.
We worked out an example using a simple modulus operator based algorithm that uses two adjacent pixels to hide one byte of data. 
We chose to use 2 pixels in order to hide one bit of data in every R, G, B and A value of both pixels, together forming the full byte (8 bits). 
We figured if we would have used only one pixel to hide the full byte of data, that would imply we had to alter the RGBA values in a more visible way for the human-eye, and thus make it easier to detect the fact a message was hidden inside the image. 
In case of an image where the Alpha channel is unimportant, we thought an interesting alternative approach would perhaps be to modify one bit of the R, G and B values and all 8 bits of the alpha channel. 
This would allow us to store 11 bits in just one pixel, which is even more than one byte, 1.375 bytes per pixel to be exact. Thus, this means we could store 11 bytes of data in just 8 adjacent pixels, which sounded like a pretty good start to us. 
Unfortunately, we haven't had the chance yet to implement our design into Java-code, but given the idea is fully worked out in our heads and on paper, this will probably/hopefully be something to finish tomorrow.


Blog #1
===========

So after class ended around 11am, we went on another coffee run with Liam and a few other students. 
We exchanged some information about the units they get and the ones we have back home.
After that we went home and gave the cryptolocker another shot. 
We read up and gathered some general information on some terms which we weren�t yet familiar with like AES, the KeyGenerator & Cipher class.
After we figured that out we googled a few simple exercises on how to encrypt and decrypt some string examples. 
That went quite alright so we�re progressing with a steady pace on the cryptolocker. 
Tomorrow we�ll probably finish it and we�ll try to come up with a few ideas on our own.



