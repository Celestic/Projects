package symmetricLocker;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.security.NoSuchAlgorithmException;
import java.security.spec.KeySpec;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.codec.binary.Base64;

public class SymmetricCryptoLocker {

	protected String msg;
	

	public static final String KEY_FILE = "C:/CryptoLocker/Symmetric/keys/private.key";
	public static final String MSG_ENCRYPTION = "C:/CryptoLocker/Symmetric/Encryption/Encryption.txt";
	public static final String MSG_FILE = "C:/Cryptolocker/Symmetric/Message/Message.txt";

	protected byte[] msgBytes;
	protected byte[] cipherBytes;
	protected byte[] decryptBytes;

	public SymmetricCryptoLocker(String path) throws Exception {
		this.msg = msg;

	}

	/**
	 * Encrypt a message with a symmetric algorithm and write the output to a
	 * file
	 * 
	 * @param secretKey
	 * @throws Exception
	 */
	public void SymmetricEncrypt(SecretKey secretKey) throws Exception {
		Cipher cipher;
		
		String everything;
		 try(BufferedReader br = new BufferedReader(new FileReader(MSG_FILE))) {
		        StringBuilder sb = new StringBuilder();
		        String line = br.readLine();

		        while (line != null) {
		            sb.append(line);
		            sb.append(System.lineSeparator());
		            line = br.readLine();
		        }
		         everything = sb.toString();
		    }
		msg = everything;
		msgBytes = msg.getBytes("UTF-8");
		cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");

		cipher.init(Cipher.ENCRYPT_MODE, secretKey);

		cipherBytes = cipher.doFinal(msgBytes);
		
		String cipherText = new String(cipherBytes, "UTF-8");
		System.out.println("Encrypted Message: " + cipherText);

		File file = new File(MSG_ENCRYPTION);

		// Create files to store public and private key
		if (file.getParentFile() != null) {
			file.getParentFile().mkdirs();
		}
		file.createNewFile();
		System.out.println(cipherBytes.length);
		ObjectOutputStream msgOS = new ObjectOutputStream(new FileOutputStream(
				MSG_ENCRYPTION));
		msgOS.writeBytes(cipherText);
		msgOS.close();

	}

	/**
	 * Decrypt a message with a symmetric algorithm
	 * 
	 * @param secretKey
	 * @throws Exception
	 */
	public void SymmetricDecrypt(SecretKey secretKey) throws Exception {
		Cipher cipher;
		
		//InputStream in = new FileInputStream(MSG_ENCRYPTION);

		//byte[] b = new byte[in.available()];
		//in.read(b);
		
		//System.out.println(b.length);
		//for (int i = 0; i < b.length; i++) {
		//	System.out.print(b[i]);

		//}
		//System.out.println();
		
		cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
		cipher.init(Cipher.DECRYPT_MODE, secretKey);

		decryptBytes = cipher.doFinal(cipherBytes);
		//decryptBytes = cipher.doFinal(b);
		

		String decryptedText = new String(decryptBytes, "UTF-8");
		System.out.println("Decrypted Message: " + decryptedText);
	}

	/**
	 * Generate a key
	 * 
	 * @return
	 * @throws Exception
	 */
	public SecretKey generateKey() throws Exception {
		KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
		keyGenerator.init(128);
		SecretKey secretKey = keyGenerator.generateKey();

		File file = new File(KEY_FILE);

		// Create files to store key
		if (file.getParentFile() != null) {
			file.getParentFile().mkdirs();
		}
		file.createNewFile();

		FileOutputStream keyOS = new FileOutputStream(KEY_FILE);
		keyOS.write(secretKey.getEncoded());
		keyOS.close();

		return secretKey;
	}

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;
	}

}
