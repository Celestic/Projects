package Locker;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidKeyException;
import java.security.SecureRandom;

import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class AsymmetricCryptoLocker {

	Cipher pkCipher;
	Cipher aesCipher;
	SecureRandom AES_Key_Size;
	byte[] aesKey;
	SecretKeySpec aeskeySpec;

	public AsymmetricCryptoLocker() throws Exception {
		// create RSA public key cipher
		pkCipher = Cipher.getInstance("RSA");
		// create AES shared key cipher
		aesCipher = Cipher.getInstance("AES");
	}

	public void makeKey() throws Exception {
		KeyGenerator kgen = KeyGenerator.getInstance("AES");
		kgen.init(AES_Key_Size);
		SecretKey key = kgen.generateKey();
		aesKey = key.getEncoded();
		aeskeySpec = new SecretKeySpec(aesKey, "AES");
	}
	public void encrypt(File in, File out) throws IOException, InvalidKeyException {
	    aesCipher.init(Cipher.ENCRYPT_MODE, aeskeySpec);
	    
	    FileInputStream is = new FileInputStream(in);
	    CipherOutputStream os = new CipherOutputStream(new FileOutputStream(out), aesCipher);
	    
	    copy(is, os);
	    
	    os.close();
	  }
	private void copy(InputStream is, OutputStream os) throws IOException {
	    int i;
	    byte[] b = new byte[1024];
	    while((i=is.read(b))!=-1) {
	      os.write(b, 0, i);
	    }
	  }

}
