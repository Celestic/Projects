package alpha.crypto;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

import org.apache.commons.*;

public class SymmetricEncryption {

	private static SecretKey secretKey = null;
	private static Cipher cipher = null;
	
	String msg= "Als ge last hebt van vliegende geiten over de villa moet ge stoppen met dieje tequila";
	byte [] msgBytes;
	byte [] cipherBytes;
	byte [] decryptedBytes;
	
	File file = new File("Output.txt");
	Writer writer = null;
	writer = new BufferedWriter(new OutputStreamWriter(
	          new FileOutputStream("filename.txt"), "utf-8"));

	
	
	
	public SymmetricEncryption() throws Exception{
		KeyGenerator keyGenerator = KeyGenerator.getInstance("AES");
		keyGenerator.init(128);
		
		secretKey = keyGenerator.generateKey();
		cipher = Cipher.getInstance("AES");
		System.out.println(msg);
		
			
		try {
		    writer = new BufferedWriter(new OutputStreamWriter(
		          new FileOutputStream("filename.txt"), "utf-8"));
		    writer.write("Something");
		} catch (IOException ex) {
		  // report
		} finally {
		   try {writer.close();} catch (Exception ex) {}
		}
	}
	
	public void encrypt() throws Exception{
		
		msgBytes = msg.getBytes("UTF-8");
		
		cipher.init(Cipher.ENCRYPT_MODE, secretKey);
		cipherBytes = cipher.doFinal(msgBytes);
		String cipherText = new String(cipherBytes,"UTF-8");
		
		
		System.out.println("Encrypted Message: " + cipherText);
		bw.write(cipherText);
		
	}
	public void decrypt()throws Exception{
		cipher.init(Cipher.DECRYPT_MODE, secretKey);
		decryptedBytes = cipher.doFinal(cipherBytes);
		String decryptedText = new String(decryptedBytes,"UTF-8");
		
		System.out.println("Decrypted again :" + decryptedText);
		bw.write(decryptedText);
		
	}

	
}
